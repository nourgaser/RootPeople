//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/MyControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyControls"",
    ""maps"": [
        {
            ""name"": ""normal"",
            ""id"": ""cada25e2-c7fb-416e-82a9-35e16c4a2a15"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""10b738a4-cf3c-4634-b465-d4328211eaa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""0e7e0528-7d49-42bf-9b09-9d274d21e0fb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Button"",
                    ""id"": ""0f74f143-db31-4d7b-b227-119b83acf76a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToRoot"",
                    ""type"": ""Button"",
                    ""id"": ""1e69a769-0b5a-4de4-a024-1813a19435a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""00e240dd-fa11-457f-93f1-2746da351309"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d6f82f25-1e77-4789-a0af-5f70ba52c09c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6cb2c670-3721-4288-bfaa-1ee58138882d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""eb6c2251-5cd4-4f6f-8c5b-54be589a91f4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""eaa63787-8911-4b87-81eb-b60316327b5d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c2472ff0-b697-4e5d-a5be-ce6ac1c877c2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""399bf460-cae7-484a-b4bb-b04278c2cd9c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7227b781-1d88-47f1-b2d1-421197a92a74"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""SwitchToRoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43755894-0c6e-4de0-b446-4f2559383ee3"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""SwitchToRoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8638ae1a-2f2f-4a62-a2c6-62214ab6d034"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a61b751-df39-41c8-96a8-80d9d9846faf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10a1b62f-194a-4379-affe-c1838372f8c2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6bb5aa0e-d6bf-450a-9054-0881dd5b6642"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9d5102b4-000c-444e-97fa-be3e14f444b2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4517e205-ca36-45c6-b651-ead67fa84cfc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""root"",
            ""id"": ""86fb6d01-e242-4c2e-975b-84268e58d527"",
            ""actions"": [
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Button"",
                    ""id"": ""61a989b0-e9ca-4643-9155-d36fda3192fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""7ec7e82a-c74c-4b89-a5d7-1b0dca766960"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Settle"",
                    ""type"": ""Button"",
                    ""id"": ""640f2e4a-d729-48c1-9502-1acb8f9f11f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""f396f77f-f278-445c-9889-a83573882e02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a7400f6a-8ad6-4ee1-828e-3779014c5074"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3325e3d9-fc26-4bfd-8d10-d12dd20a5640"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9025689a-f3d8-4e44-9d16-87fed27fd90f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d169529e-6294-40a5-a991-bea35152fd02"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""60a6c84f-9289-4d03-bbc5-e2d3b2f35505"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""821b161d-5128-41c4-97c4-88fe6991197b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9bc838e4-75e7-4238-bd4c-93125d2401c3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1163b25d-df33-420b-aada-6c5dd5c903d0"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""13d5a752-de33-44d1-b218-bfcc857aede4"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8e26b398-f0bf-4ae9-a0b6-5d2e5f521b9a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Settle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5a7b1c5-372b-449d-9e7a-56c4ff8bbbfe"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""gamepad"",
            ""bindingGroup"": ""gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // normal
        m_normal = asset.FindActionMap("normal", throwIfNotFound: true);
        m_normal_Jump = m_normal.FindAction("Jump", throwIfNotFound: true);
        m_normal_Horizontal = m_normal.FindAction("Horizontal", throwIfNotFound: true);
        m_normal_Vertical = m_normal.FindAction("Vertical", throwIfNotFound: true);
        m_normal_SwitchToRoot = m_normal.FindAction("SwitchToRoot", throwIfNotFound: true);
        m_normal_Attack = m_normal.FindAction("Attack", throwIfNotFound: true);
        // root
        m_root = asset.FindActionMap("root", throwIfNotFound: true);
        m_root_Vertical = m_root.FindAction("Vertical", throwIfNotFound: true);
        m_root_Horizontal = m_root.FindAction("Horizontal", throwIfNotFound: true);
        m_root_Settle = m_root.FindAction("Settle", throwIfNotFound: true);
        m_root_Cancel = m_root.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // normal
    private readonly InputActionMap m_normal;
    private INormalActions m_NormalActionsCallbackInterface;
    private readonly InputAction m_normal_Jump;
    private readonly InputAction m_normal_Horizontal;
    private readonly InputAction m_normal_Vertical;
    private readonly InputAction m_normal_SwitchToRoot;
    private readonly InputAction m_normal_Attack;
    public struct NormalActions
    {
        private @MyControls m_Wrapper;
        public NormalActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_normal_Jump;
        public InputAction @Horizontal => m_Wrapper.m_normal_Horizontal;
        public InputAction @Vertical => m_Wrapper.m_normal_Vertical;
        public InputAction @SwitchToRoot => m_Wrapper.m_normal_SwitchToRoot;
        public InputAction @Attack => m_Wrapper.m_normal_Attack;
        public InputActionMap Get() { return m_Wrapper.m_normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void SetCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Horizontal.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnHorizontal;
                @Vertical.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnVertical;
                @SwitchToRoot.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnSwitchToRoot;
                @SwitchToRoot.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnSwitchToRoot;
                @SwitchToRoot.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnSwitchToRoot;
                @Attack.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_NormalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @SwitchToRoot.started += instance.OnSwitchToRoot;
                @SwitchToRoot.performed += instance.OnSwitchToRoot;
                @SwitchToRoot.canceled += instance.OnSwitchToRoot;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public NormalActions @normal => new NormalActions(this);

    // root
    private readonly InputActionMap m_root;
    private IRootActions m_RootActionsCallbackInterface;
    private readonly InputAction m_root_Vertical;
    private readonly InputAction m_root_Horizontal;
    private readonly InputAction m_root_Settle;
    private readonly InputAction m_root_Cancel;
    public struct RootActions
    {
        private @MyControls m_Wrapper;
        public RootActions(@MyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Vertical => m_Wrapper.m_root_Vertical;
        public InputAction @Horizontal => m_Wrapper.m_root_Horizontal;
        public InputAction @Settle => m_Wrapper.m_root_Settle;
        public InputAction @Cancel => m_Wrapper.m_root_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_root; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RootActions set) { return set.Get(); }
        public void SetCallbacks(IRootActions instance)
        {
            if (m_Wrapper.m_RootActionsCallbackInterface != null)
            {
                @Vertical.started -= m_Wrapper.m_RootActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_RootActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_RootActionsCallbackInterface.OnVertical;
                @Horizontal.started -= m_Wrapper.m_RootActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_RootActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_RootActionsCallbackInterface.OnHorizontal;
                @Settle.started -= m_Wrapper.m_RootActionsCallbackInterface.OnSettle;
                @Settle.performed -= m_Wrapper.m_RootActionsCallbackInterface.OnSettle;
                @Settle.canceled -= m_Wrapper.m_RootActionsCallbackInterface.OnSettle;
                @Cancel.started -= m_Wrapper.m_RootActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_RootActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_RootActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_RootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Settle.started += instance.OnSettle;
                @Settle.performed += instance.OnSettle;
                @Settle.canceled += instance.OnSettle;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public RootActions @root => new RootActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_gamepadSchemeIndex = -1;
    public InputControlScheme gamepadScheme
    {
        get
        {
            if (m_gamepadSchemeIndex == -1) m_gamepadSchemeIndex = asset.FindControlSchemeIndex("gamepad");
            return asset.controlSchemes[m_gamepadSchemeIndex];
        }
    }
    public interface INormalActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnSwitchToRoot(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IRootActions
    {
        void OnVertical(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
        void OnSettle(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
